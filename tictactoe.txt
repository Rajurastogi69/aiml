% Winning Combinations
ordered_line(1,2,3).
ordered_line(4,5,6).
ordered_line(7,8,9).
ordered_line(1,4,7).
ordered_line(2,5,8).
ordered_line(3,6,9).
ordered_line(1,5,9).
ordered_line(3,5,7).

line(A,B,C) :- ordered_line(A,B,C).
line(A,B,C) :- ordered_line(A,C,B).
line(A,B,C) :- ordered_line(B,A,C).
line(A,B,C) :- ordered_line(B,C,A).
line(A,B,C) :- ordered_line(C,A,B).
line(A,B,C) :- ordered_line(C,B,A).

full(A):- x(A).
full(A):- o(A).
empty(A) :- \+(full(A)).
same(A,B) :- A == B.
different(A,B):- \+(same(A,B)).

% Move decision logic
move(C) :- rule1(C).
move(A) :- good(A), empty(A).
good(1). good(3). good(7). good(9). % corners
good(5). % center
good(2). good(4). good(6). good(8). % sides

all_full :- full(1), full(2), full(3), full(4), full(5), full(6), full(7), full(8), full(9).
% this rule is to block if there is going to be two consecutive moves,
% then it should be here
% Winning/blocking logic
rule1(C) :- line(A,B,C), o(A), o(B), empty(C), !.
rule1(C) :- line(A,B,C), x(A), x(B), empty(C), !.
rule1(5) :- empty(5).
rule1(C) :- o(A), A \= 2, A \= 4, A \= 6, A \= 8, rule2(C).
rule2(C) :- empty(C), C \= 1, C \= 3, C \= 7, C \= 9.

% Game and Conditions
done :- ordered_line(A,B,C), x(A), x(B), x(C), write('I won.'), nl.
done :- all_full, write('Draw.'), nl.

% player move
getmove :- repeat, write('Please enter a move:'), read(X), empty(X), assert(o(X)).

% AIMOVE
makemove :- move(X), !, assert(x(X)).
makemove :- all_full.

% Square Printer
printsquare(N) :- o(N), write(' o ').
printsquare(N) :- x(N), write(' x ').
printsquare(N) :- empty(N), write(' . ').

% print the board
printboard :-
    nl,
    printsquare(1), write('|'), printsquare(2), write('|'), printsquare(3), nl,
    write('---+---+---'), nl,
    printsquare(4), write('|'), printsquare(5), write('|'), printsquare(6), nl,
    write('---+---+---'), nl,
    printsquare(7), write('|'), printsquare(8), write('|'), printsquare(9), nl,
    nl.

% reset the game
clear :- retractall(x(_)), retractall(o(_)).

% main- choice for computer or human move
play :-
    random(1, 11, P),
    (P >= 6 -> start; elsepart).

% generate a random position
random_position(N) :-
    random(1, 10, N).

elsepart :- clear,
    random_position(N), assert(x(N)), printboard, repeat, getmove, respond.

start :- clear, repeat, getmove, respond.

respond :- ordered_line(A,B,C), o(A), o(B), o(C), printboard, write('You won.'), nl.
respond :- makemove, printboard, done.
